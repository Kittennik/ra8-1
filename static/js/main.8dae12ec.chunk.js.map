{"version":3,"sources":["components/List.js","components/Details.js","App.js","serviceWorker.js","index.js"],"names":["List","props","data","map","item","key","id","onClick","onClickItem","className","active","name","Details","alt","src","avatar","details","city","company","position","App","url","process","useState","list","setList","setDetails","state","itemUrl","currentFetch","setCurrentFetch","isLoading","setLoading","useEffect","a","fetch","response","ok","Error","statusText","json","console","log","fetchData","prevList","activeItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sOAEe,SAASA,EAAKC,GAAQ,IAC3BC,EAASD,EAATC,KAKR,OACE,4BACGA,EAAKC,KAAI,SAACC,GAAD,OAAU,wBAAIC,IAAKD,EAAKE,GAAIC,QAAS,kBAN9BD,EAMgDF,EAAKE,QALxEL,EAAMO,YAAYF,GADA,IAACA,GAM0DG,UAAWL,EAAKM,OAAS,SAAW,IAC5GN,EAAKO,UCTC,SAASC,EAAQX,GAAQ,IAC9BC,EAASD,EAATC,KACR,OACE,yBAAKI,GAAIJ,EAAKI,GAAIG,UAAU,WAC1B,yBAAKI,IAAKX,EAAKS,KAAMG,IAAKZ,EAAKa,SAC/B,uBAAGN,UAAU,QAAQP,EAAKS,MAC1B,oCAAUT,EAAKc,QAAQC,MACvB,uCAAaf,EAAKc,QAAQE,SAC1B,wCAAchB,EAAKc,QAAQG,WCsDlBC,MA3Df,WACE,IAAMC,EAAMC,uGADC,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGiBF,mBAAS,IAH1B,mBAGNP,EAHM,KAGGU,EAHH,OAI2BH,mBAAS,CAC/CI,MAAOF,EACPG,QAAQ,GAAD,OAAKP,EAAL,gBANI,mBAINQ,EAJM,KAIQC,EAJR,OAQmBP,oBAAS,GAR5B,mBAQNQ,EARM,KAQKC,EARL,KAkDb,OAxCAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,6DAChBF,GAAW,GADK,kBAGSG,MAAMN,EAAaD,SAH5B,WAGRQ,EAHQ,QAIAC,GAJA,sBAKN,IAAIC,MAAMF,EAASG,YALb,uBAOKH,EAASI,OAPd,OAORtC,EAPQ,OAQd2B,EAAaF,MAAMzB,GARL,kDAUduC,QAAQC,IAAR,MAVc,yBAYdV,GAAW,GAZG,6EAAH,qDAefW,KACC,CAACd,IAwBF,oCACGE,GAAa,uBAAGtB,UAAU,WAAb,6EACd,kBAACT,EAAD,CAAME,KAAMsB,EAAMhB,YAxBF,SAACF,GAChBA,IAAOU,EAAQV,KAChBmB,GAAQ,SAAAmB,GAAQ,OAAIA,EAASzC,KAAI,SAACC,GAChC,IAAIyC,GAAa,EAIjB,OAHIzC,EAAKE,KAAOA,IACduC,GAAa,GAER,CACLvC,GAAIF,EAAKE,GACTK,KAAMP,EAAKO,KACXD,OAAQmC,SAIZf,EAAgB,CACdH,MAAOD,EACPE,QAAQ,GAAD,OAAKP,GAAL,OAAWf,EAAX,eASRU,EAAQV,IAAM,kBAACM,EAAD,CAASV,KAAMc,MC/ChB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.8dae12ec.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function List(props) {\n  const { data } = props;\n  const handleClick = (id) => {\n    props.onClickItem(id);\n  };\n\n  return (\n    <ul>\n      {data.map((item) => <li key={item.id} onClick={() => handleClick(item.id)} className={item.active ? 'active' : ''}>\n        {item.name}\n      </li>)}\n    </ul>\n  );\n}\n","import React from 'react';\n\nexport default function Details(props) {\n  const { data } = props;\n  return (\n    <div id={data.id} className=\"details\">\n      <img alt={data.name} src={data.avatar} />\n      <p className=\"name\">{data.name}</p>\n      <p>City: {data.details.city}</p>\n      <p>Company: {data.details.company}</p>\n      <p>Position: {data.details.position}</p>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport List from './components/List';\nimport Details from './components/Details';\n\nfunction App() {\n  const url = process.env.REACT_APP_URL;\n  const [list, setList] = useState([]);\n  const [details, setDetails] = useState({});\n  const [currentFetch, setCurrentFetch] = useState({\n    state: setList,\n    itemUrl: `${url}users.json`,\n  });\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(currentFetch.itemUrl);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        const data = await response.json();\n        currentFetch.state(data);\n      } catch (e) {\n        console.log(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [currentFetch]);\n\n  const handleClick = (id) => {\n    if(id !== details.id) {\n      setList(prevList => prevList.map((item) => {\n        let activeItem = false;\n        if (item.id === id) {\n          activeItem = true;\n        }\n        return {\n          id: item.id,\n          name: item.name,\n          active: activeItem,\n        };\n      }))\n\n      setCurrentFetch({\n        state: setDetails,\n        itemUrl: `${url}${id}.json`,\n      });\n    }\n  }\n\n  return (\n    <>\n      {isLoading && <p className=\"loading\">Идет загрузка</p>}\n      <List data={list} onClickItem={handleClick} />\n      {details.id && <Details data={details} />}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}